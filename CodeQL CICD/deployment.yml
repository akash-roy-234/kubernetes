name: Quality check and Approval Gate

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.date.outputs.datetime }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Get current date
        id: date
        run: echo "::set-output name=datetime::$(date +%Y%m%d%H%M%S)"

  codeql-analysis:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: [ 'java' ]

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  sonarqube-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: maven

    - name: Run SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        args: >
          -Dsonar.qualitygate.wait=true
          -Dsonar.projectKey=com.optumrx.m3p:orx-m3p-experience-api
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.verbose=true
          -Dsonar.java.binaries=target/classes
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    deployment-to-azure-k8s:
      needs: [codeql-analysis, sonarqube-scan]
      runs-on: ubuntu-latest
      environment: production-deployment

  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log into Azure using GitHub secret AZURE_CREDENTIALS
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run az commands
      run: |
        az account show
      shell: bash

    - name: Replace variables in the properties file
      run: |
        FILES=${{ github.workspace }}/src/main/resources/application*
        for file in $FILES; do
          PLACEHOLDERS=$(grep -oE '__(\w+(-\w+)*)__' $file | sort -u) || continue
          echo "Updating this file: $file"
          for placeholder in $PLACEHOLDERS; do
            SECRET_NAME=${placeholder//__}
            SECRET_VALUE=$(az keyvault secret show --name $SECRET_NAME --vault-name orx-pbm-m3p-dev-us-c-kv --query value) || continue
            if [ $? -eq 0 ]; then
              sed -i "s|${placeholder}|${SECRET_VALUE//\"}|g" "$file"
              echo "Replaced ${placeholder} with secret value"
            else
              echo "Warning: Secret $SECRET_NAME not found in key vault. Placeholder not replaced."
            fi
          done
          cat $file
        done
      shell: bash

    - name: Set up JDK Version
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Maven Clean Install
      run: |
        sudo apt update -qq && sudo apt install -y -qq maven
        mvn -version
        mvn -U clean install -q

    - name: Docker Login to Azure Container Registry
      run: |
        echo "${{ secrets.ACR_PASSWORD }}" | docker login orxpbmm3puscdevacr.azurecr.io --username ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Build Docker image
      run: docker build --build-arg --force-rm -t orxpbmm3puscdevacr.azurecr.io/orx-m3p-experience-api:${{ github.run_number }} -f ./deployment/development/Dockerfile .

    - name: ACR Login
      run: az acr login --name orxpbmm3puscdevacr

    - name: Push Docker image to Azure Container Registry
      run: docker push orxpbmm3puscdevacr.azurecr.io/orx-m3p-experience-api:${{ github.run_number }}

    - name: Deploy to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: 'orx-pbm-m3p-dev-us-c-rg'
        cluster-name: 'orx-pbm-m3p-dev-us-c-api-aks'
        admin: 'false'
        use-kubelogin: 'true'

    - name: Deploy application
      uses: Azure/k8s-deploy@v4
      with:
        manifests: ${{ github.workspace }}/deployment/development/deployment.yml
        namespace: 'm3p-dev'
