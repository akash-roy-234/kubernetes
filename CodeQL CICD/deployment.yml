name: Comprehensive CI/CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  codeql-analysis:
    runs-on: uhg-runner
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: [ 'java' ]
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  sonarqube-scan:
    needs: codeql-analysis
    runs-on: uhg-runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: maven

    - name: Setup Maven
      uses: uhg-actions/setup-maven@v4.4
      with:
        maven-version: 3.6.0

    - name: Cache Maven
      uses: actions/cache@v3
      with:
        path: /home/runner/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build, run JUnit tests, and Sonar Analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GHEC_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B -e clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectBaseDir=src -Dsonar.buildbreaker.skip=true -Dmaven.repo.local=/home/runner/.m2/repository

    - name: SonarQube Quality Gate check
      uses: uhg-actions/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Scan
      uses: uhg-actions/sonarqube-scan-action@master
      with:
        projectBaseDir: .
        args: >
          -Dsonar.qualitygate.wait=true
          -Dsonar.buildbreaker.skip=true
          -Dsonar.projectKey=com.optumrx.m3p:orx-m3p-experience-api
          -Dsonar.sources=.
          -Dsonar.java.binaries=target/classes
          -Dsonar.verbose=true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  owasp-zap-scan:
    needs: sonarqube-scan
    runs-on: uhg-runner
    environment: quality-gate-approval
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.2.0
      with:
        target: 'https://your-live-site.com'

    - name: Upload ZAP Scan Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-report
        path: zapReport.html  # Specify the correct path to your ZAP report file

  deployment-to-azure-k8s:
    needs: owasp-zap-scan
    runs-on: uhg-runner
    environment: production-deployment
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log into Azure using GitHub secret AZURE_CREDENTIALS
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up JDK Version
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Maven Clean Install
      run: |
        sudo apt update -qq && sudo apt install -y -qq maven
        mvn -version
        mvn -U clean install -q

    - name: Extra Build Task
      run: echo "Running extra build task..."
      # Replace the above echo command with your actual build commands

    - name: Docker Login to Azure Container Registry
      run: |
        echo "${{ secrets.ACR_PASSWORD }}" | docker login orxpbmm3puscdevacr.azurecr.io --username ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Build Docker image
      run: docker build --build-arg --force-rm -t orxpbmm3puscdevacr.azurecr.io/orx-m3p-experience-api:${{ github.run_number }} -f ./deployment/development/Dockerfile .

    - name: ACR Login
      run: az acr login --name orxpbmm3puscdevacr

    - name: Push Docker image to Azure Container Registry
      run: docker push orxpbmm3puscdevacr.azurecr.io/orx-m3p-experience-api:${{ github.run_number }}

    - name: Deploy to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: 'orx-pbm-m3p-dev-us-c-rg'
        cluster-name: 'orx-pbm-m3p-dev-us-c-api-aks'
        admin: 'false'
        use-kubelogin: 'true'

    - name: Deploy application
      uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        manifests: ${{ github.workspace }}/deployment/development/deployment.yml
        namespace: 'm3p-dev'
        images: |
          orxpbmm3puscdevacr.azurecr.io/orx-m3p-experience-api:${{ github.run_number }}
